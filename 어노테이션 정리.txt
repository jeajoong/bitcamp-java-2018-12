# Annotation 정리

 @Controller - Presentation Layer에서 Contoller를 명시하기 위해서 사용 (클래스)
    -> 명시가능 @RequestMapping - 특정 URL에 매칭되는 클래스나 메소드임을 명시하기 위해 사용(클래스,메소드)



  @Service - Business Layer에서 Service를 명시하기 위해서 사용 (클래스)
      // 스프링 IoC 컨테이너가 관리하는 객체 중에서 비즈니스 로직을 담당하는 객체는 
      // 특별히 그 역할을 표시하기 위해 @Component 대신에 @Service 애노테이션을 붙인다.
  
  @Component - 그 외에 자동으로 스캔해서 등록하고 싶은 것들을 위해 사용 (직접 컨트롤이 가능한 Class들의 경우)
    //메타데이터 객체를 인자로 전달한다.
    //메타데이터 객체는 컴포넌트 생성에 필요한 정보(셀렉터, 템플릿, 스타일 정의 등)를 담고 있는 객체이다.
    //예를 들어 메타데이터 객체의 templateUrl 프로퍼티에는 컴포넌트의 뷰를 정의한 템플릿의 상대경로를 설정한다
    
  @Repository - Persistence Layer에서 DAO를 명시하기 위해서 사용 (클래스)
  @RequestParam - 요청(request)에서 특정한 파라미터의 값을 찾아낼때 사용(파라미터)
    
    
   ### AppConfig 에서 사용
    @ComponentScan(basePackages="com.eomcs.lms") 
      //Configuration 클래스 및 Annotation에 사용하는 설정들을 파싱한다.
        //1. Configuration 파싱
        //2. ComponentScan 설정 내역을 파싱한다.
        //3. Class 로딩 - 클래스로더를 이용하여 모든 자원을 Resource 인터페이스 형태로 불러옴
        //4. Bean 정의 설정
        //5. Bean 생성 & 주입
    
   @ImportResource("classpath:/com/eomcs/lms/conf/tx-context.xml") -> resources 폴더에 존재
      // 트랜잭션을 설정한 파일을 로딩한다. 파일내부에는 트랜잭션 advice를 적용할 대상을 정의한다.
      // => Spring IoC 컨테이너는 @ImportResource 애노테이션에 지정된 설정 파일에 따라 객체를 준비한다.
   

    ★스프링 Web MVC를 적용 후 AppConfig를 알려줘야 한다. (처리 해주고 싶어도 경로를 모르면 못해주니까..)
   스프링 Web MVC가 @Controller, @RequestMapping, @RequestParam, @RequestHeader 애노테이션들을 처리해준다
   대신 Appconfig에 @EnableWebMvc애노테이션을 붙인다 
   XML로 설정도 가능하다
 
    
    
   ### DatabaseConfig에서 사용
  @Configuration
      // @Bean을 이용해 DataSource 설정을 해주어서 Spring과 관련된 설정파일임을 명시해준다.
      // 이 어노테이션 또한 빈이 된다. 
       
  @PropertySource("classpath:/com/eomcs/lms/conf/jdbc.properties")
      // Property 파일을 Environment로 로딩할 수 있다. 
      Environment env; 객체를 만든이유
      Environment는 스프링 프레임워크가 자동으로 Inject하는 Bean이다. 

  @EnableTransactionManagement
      //트랜잭션 매니저를 지정해 줄 수 있다 (Bean으로 된 것들을 찾아서 트랜잭션 관리)
    
  @Autowired
    // 다른 빈을 찾아 빈 간의 의존성을 부여
    // -- 추가설명 스프링 컨테이너는 @Bean이 붙은 메서드에 대해 한 개의 객체만 생성한다.
    //    다른 클래스에서 만들어둔 객체 하나를 이 필드에 할당하는 것이다.
    //  ++ 만약 메서드에 자동 주입할 빈이 존재하지 않으면 예외가 발생한다.
    //     자동 주입할 대상이 필수가 아닌 경우에는 required 속성을 false로 선언해 @Autowired(required = false)
    //     예외 처리를 막거나 자바8의 의존 주입 대상에 Optional 속성을 이용해도 된다(값이 없는 Optional을 인자로 전달)
    //     또는 @Nullable 애노테이션을 이용해도 된다.(존재하지 않을시 null 전달)
    

   @Bean ( 개발자가 컨트롤이 불가능한 외부 라이브러리들을 Bean으로 등록하고 싶은 경우 사용)
    //스프링에서 이 태그를 붙인 것들의 객체를 자동으로 생성해줌
    //(DatabaseConfig에서는 내부에 Environment 객체로 jdbc 드라이버 정보를 전달.)
    
   @MapperScan("com.eomcs.lms.dao")
    // @Mapper로 명시된 interface를 스캔
    // 두 개 이상의 MapperScan class 사용 시 명시를 안하면 오류
   
   + @Qualifier("한정자 명")
     // 자동 주입이 가능한 같은 타입의 빈을 선택해서 주입할 수 있게 해준다.
     // (이 어노테이션이 붙어있는 메서드가 있다면 프로젝트 내에 중복된 타입의 형태가 있다는 것을 유추)
    
   
   
   ###
   @WebServlet  애노테이션의 주요 속성
   - name
    // 서블릿의 이름을 설정하는 속성 
    // @WebServlet(name = "서블릿 이름")

   - urlPatterns
    // 서블릿의 URL 목록을 설정하는 속성  
    // @WebServlet(urlPatterns = "/calc")
    // @WebServlet(urlPatterns = {"/calc"})
    // @WebServlet(  urlPatterns = {"/calc","calc.do", "calculator.action"}  )


   - value
    // urlPatterns와 같은 용도이다. value는 속성 이름 없이 값만 설정 할 수 있다. 
    // @WebServlet("/calc")
    //* value속성 외에 다른 속성의 값도 함께 사용 할 시 이름을 생략할 수 없다.


   - loadOnStartup = 1 (어노테이션으로 설정 ||java-web.ex06.Servlet01 참조)
    // 서블릿은 최초 요청이 들어올때 초기화 된다.
    // 클래스 로딩 인스턴스화 초기화 설정 하게 되면 서버가 올라가고 맨처음 호출한 유저는 보통 시간보다 시간이 오래걸리게 된다.
    // 클라이언트가 실행을 요청하지 않아도 서블릿을 미리 생성하고 싶다면, loadOnStartup 프로퍼티 값을 지정
    // loadOnStartup = 실행순서
    // 미리 생성할 서블릿이 여러 개 있다면, loadOnStartup에 지정한 순서대로 생성한다.
    // 웹 애플리케이션을 시작시킬 때 미리 서블릿 객체를 준비한다.
    // => ex) DB연결, 소켓 연결, 필요한 환경 변수 로딩, 스프링 IoC 컨테이너 준비 등
    //(...xml 설정시에) <Servlet> ...  <load-on-startup> 1 </load-on-startup> <Servlet>
    //


### AuthFilter에서 사용
     @WebFilter("/app/*")
    // 웹에 필터를 설정하기위에 사용된다 xml 파일의 설정으로 대신할 수 있다.
    // Filter 인터페이스를 상속받고
    // FilterConfig 인터페이스 객체를 활용해 서블릿에 사용되는 필터 정보를 전달
    // doFilter()메서드를 활용한다. 

