DB 논리/물리... -> 물리는 실제 컬럼명 및 데이터 타입을 정의 논리는 엔티티타입 및 관계를 정의
트랜잭션 : 하나의 논리적인 작업을 수행하는 일련의 데이터베이스 명령의 집합

JDBC(Java Data Base Connection) : JAVA언어를 이용해 데이터베이스에 접근할 수 있는 프로그래밍을 의미

스레드(Thread)    : 프로세스 내에서 할당된 자원을 이용하여 실행되는 하나의 작업의 단위
프로세스(Process) : 운영체제에서 실행중인 하나의 프로그램

상속 : 부모 클래스가 가지고 있는 것을 자식 클래스가 물려 받아서 확장하는 개념
추상 : 추상 클래스는 공통된 내용을 정의 하여 상속받은 클래스들을 규격화 하는 것이다.
Stack : LIFO(Last In First Out) 후입선출 구조
Queue : FIFO(First In First Out) 선입선출 구조

---- 자바 특징 ----
OOP(객체지향 프로그래밍) : 데이터를 객체로 취급하여 프로그램에 반영
JVM위에서 프로그램이 돌아가기 때문에 이식성이 높다.
함수적 스타일 코딩이 가능하다 (람다 기능)
메모리를 자동으로 관리해준다(가비지 컬렉터 등)
멀티 스레드를 쉽게 구현 가능
필요한 시점에 동적으로 로딩
풍부한 오픈소스 라이브러리,
다양한 어플리케이션 개발 가능
----------

RESTful : 장비간 통신을 위해 간단하게 URL을 사용.(기존의 복잡한 방식 차선)
JPA : 자바 어플리케이션에서 관계형 데이터베이스를 사용하는 방식을 정의한 인터페이스
하이버네이트 - JPA의 구현체이자 객체지향 도메인 모델을 관계형 데이터베이스로 매핑하기 위한 프레임워크

Servlet / JSP : 자바 플랫폼에서 자바로 만들어진 웹 앱을 개발할 때 사용하는 핵심기술, 컨트롤러와 뷰의 역할 분담이 가능
   ( JSP는 html 코드에 JAVA코드를 블록화하여 삽입 , 서블릿의 모든 기능 + 추가적인 기능)
  mvc1과 mvc2 차이
    mvc1은 사용자의 요청 및 응답 처리를 View와 요청 및 응답 처리의 과정이 함께 작성되어있다.
    mvc2는 사용자의 요청을 Servlet(Controller)로 전담하고 JSP를 통해 응답처리한다.

Session / Cookie 사용 이유 : HTTP프로토콜은 연결 지향적인 성격을 버렸기 때문에 새로운 페이지를 요청할 때마다 새로운 접속이 이루어지는 형태
      특정 방문자가 해당 사이트에 머무르고 있는 동안에 그 방문자를 식별하기 위해 사용
Session : 특정 웹사이트에서 사용자가 머무르는 기간을 의미, Session에 관한 데이터는 Server에 저장됨, Cookie에 비해 보안성이 좋음.
Cookie : 웹사이트 방문 기록을 Client PC에 저장됨, Client PC에 저장되어 보관되기 때문에 보안에 취약함.
- 보안성이 낮은 Cookie 대신 Session을 사용하면 되는데 안하는이유? 
   => 모든 정보를 Session에 저장하면 Server의 메모리를 과도하게 사용하게 됨

Filter와 Interceptor의 방식 차이는 ? 
Filter : 서블릿 필터는 DispatcherServlet 이전에 실행이 되는데 필터가 동작하도록 지정된 자원의 앞단에서 요청내용을 변경 
         및 자원의 처리가 끝난 후 응답내용에 대해서도 변경하는 처리
Interceptor : 스프링의 DistpatcherServlet이 컨트롤러를 호출하기 전, 후로 끼어들기 때문에 
                스프링 컨텍스트(Context, 영역) 내부에서 Controller(Handler)에 관한 요청과 응답에 대해 처리


싱글톤 패턴 : 객체가 하나만 생성되어야 하는 경우, 이미 생성된 객체가 있으면 그 객체를 사용 하도록 하는 방식
팩토리 패턴 : 객체끼리 의존성을 줄이기 위해 객체의 생성과 데이터 주입만 담당하는 팩토리 클래스를 정의하고, 생성된 객체를 가져다 사용,
옵저버 패턴 : 하나의 객체가 변하면 다른 객체가 변했다는 사항을 알려주어야 하는 경우에 사용

AJAX : 웹프로그래밍에서 정적인 페이지의 상태를 동적으로 만들기 위한 기술(부분적 request)

AOP는 관점지향 프로그래밍 제어를 역전한다. => OOP를 보완하기 위해 나온 개념이다 중복을 줄일 수 없는 부분을 줄이기 위한 과정

*MVC패턴
MVC란 사용자가 이용하는 인터페이스에 효과적으로 데이터 모형에 관련시키기 위한 설계 방식
MVC 구성요소
Model - 클래스로 논리적 데이터 기반 구조를 표현, 사용자 인터페이스에 관한 정보를 갖고있지 않음(DTO)
View - 사용자 인터페이스 내의 구성요소들을 표현(사용자에게 보여지는 화면 ex.JSP)
Controller - Model과 View를 연결하고 있는 클래스, Model과 View 내의 클래스들 간 정보를 교환하는데 이용


Framework
- 특정한 틀을 만들어놓고 거기에 살을 붙여 놓음으로써 작업시간을 줄여주는 것.
- 특정 개념들의 추상화를 제공하는 여러 클래스나 컴포넌트로 구성, 재사용이 가능
특징 : 개발자들이 따라야할 가이드라인을 가짐, 개발할 수 있는 범위가 정해져 있음, 개발자를 위한 다양한 도구들 지원
장점 : 개발시간을 줄이고 오류로 부터 자유로워진다.
단점 : 프레임워크에 너무 의존하면 개발 능력이 떨어져 프레임워크 없이 개발하는 것이 불가능해짐.
